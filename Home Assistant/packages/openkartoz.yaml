# Configuration des entrées textuelles pour le karotz 101 Salon
input_text:
  karotz_ip_address:
    name: karotz Ip Address
    initial: "192.168.1.xxx"  # Adresse IP par défaut du karotz
  karotz_color_1:
    name: karotz Color 1
    initial: "ffff00"  # Couleur primaire en hexadécimal (jaune)
  karotz_color_2:
    name: karotz Color 2
    initial: "000000"  # Couleur secondaire en hexadécimal (noir)
# ajout d'un interface pour les tag rfid
  karotz_rfid_id:
    name: ID du Tag RFID
  karotz_rfid_name:
    name: Nom de l'action

  karotz_rfid_url:
    name: URL à appeler


# État d'éveil du karotz
input_boolean:
  karotz_awake:
    initial: on
# ajout pour l'automatisation courrier et colis
  courrier_detecte:
    name: Courrier déjà signalé
    initial: false
  colis_detecte:
    name: Colis déjà signalé
    initial: false
# active ou désactive l'ajout d'un tag rfid
  karotz_mode_enregistrement_tag:
    name: Enregistrement Tag Karotz

# Capteur pour surveiller l'état de sommeil
sensor:
  - platform: rest
    resource: http://192.168.1.xxx/cgi-bin/status
    name: karotzSleep
    value_template: '{{ value_json.sleep }}'

# dernier tag enregistré
  - platform: rest
    name: Dernier Tag Karotz
    resource: "http://192.168.1.xxx/cgi-bin/rfid_list"
    value_template: "{{ value_json['tags'][-1]['id'] }}"
    scan_interval: 5
    
# Configuration des contrôles numériques
input_number:
  karotz_ear_left:
    name: karotz Ear Left
    initial: 0
    min: 0
    max: 16  # Position maximale de l'oreille gauche
    step: 1
  karotz_ear_right:
    name: karotz Ear Right
    initial: 0
    min: 0
    max: 16  # Position maximale de l'oreille droite
    step: 1
  karotz_light_speed:
    name: karotz Light Speed
    initial: 700
    min: 0
    max: 2000  # Vitesse maximale des effets lumineux
    step: 100

# Groupement des contrôles karotz
group:
  karotz_utils:
    name: karotz Utils
    entities:
      - script.karotz_moods

# Scripts de contrôle du karotz
script:
  karotz_moods: 
    alias: "Talk!"  # Fait parler le karotz
    sequence:
      - action: rest_command.karotz_moods

  karotz_wakeup:
    alias: "Wake Up"  # Réveille le karotz
    sequence:
      - action: rest_command.karotz_ears_reset
      - action: rest_command.karotz_wakeup
      - action: rest_command.karotz_light

  karotz_sleep:
    alias: "Sleep"  # Met le karotz en veille
    sequence:
      - action: rest_command.karotz_sleep
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.karotz_awake
# script pour envoyé la commande d'ajout d'un tag rfid
  assign_tag_to_karotz:
    alias: Assigner un tag RFID
    sequence:
      - action: rest_command.karotz_rfid_assign
        
# Interrupteur template pour contrôler l'état d'éveil
switch:
  - platform: template
    switches:
      karotz_life:
        friendly_name: "Éveillé"
        value_template: "{{ is_state('input_boolean.karotz_awake', 'on') }}"
        turn_on:
          action: script.turn_on
          target:
            entity_id: script.karotz_wakeup
        turn_off:
          action: script.turn_on
          target:
            entity_id: script.karotz_sleep

# Configuration des commandes REST pour contrôler le karotz
# source : https://www.openkarotz.org/api/
rest_command:
  karotz_free_space:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/get_free_space" # espace mémoire utiliser
  karotz_moods:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/apps/moods" # dit une parole prés enregistrée aléatoire
  karotz_moods_id:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/apps/moods?id={{ moods_id }}" # dit une parole près enregistrée 1 à 305
  karotz_wakeup:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/wakeup?silent=1" # réveille en silence
  karotz_sleep:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/sleep" # dormir
  karotz_ears_random:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/ears_random" # position des oreilles alléatoires
  karotz_ears:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/ears?left={{ states('input_number.karotz_ear_left') }}&right={{ states('input_number.karotz_ear_right') }}&noreset=1" # position des oreilles
  karotz_ears_reset: 
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/ears_reset"
  karotz_light:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/leds?pulse=1&color={{ states('input_text.karotz_color_1') }}&speed={{ states('input_number.karotz_light_speed') }}&color2={{ states('input_text.karotz_color_2') }}" # allume la led et clignote
  karotz_light_fixed:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/leds?color={{ states('input_text.karotz_color_1') }}" # allume la led fixe
  karotz_say:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/tts?voice=2&text={{ text }}&nocache=undefined" # Text to speeck, dit un du text
  karotz_sound:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/sound?id={{ sound }}" # jour un son près enregistré
# sounds : bip1,bling,flush,install_ok,jet1,laser_15,ready,rfid_error,rfid_ok,saut1,start,twang_01,twang_04,return":"0"
# Controle pour l'ajout des tag rfid
  karotz_rfid_record_start:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/rfid_start_record" # ajouter un nouveau tag rfid
  karotz_rfid_record_stop:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/rfid_stop_record" # arrêter l'ajout de tag rfid
  karotz_rfid_assign: # forge l'url pour l'ajout d'un tag rfid /cgi-bin/rfid_assign_url?tag=id du tag&url=url&name=nom de l'action
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/rfid_assign_url?tag={{ states('input_text.karotz_rfid_id') }}&url={{ states('input_text.karotz_rfid_url') | urlencode }}&name={{ states('input_text.karotz_rfid_name') | urlencode }}"

# rfid_assign_url : /cgi-bin/rfid_assign_url?tag=id du tag&url=url&name=nom de l'action
# exemple : cgi-bin/rfid_assign_url?tag=D0021A3503xxxxxx&url=http://192.168.X.X/leds.cgi?led=3
  karotz_play_tai_chi:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/sound?url=file:///usr/karotz/musiques/taichi.mp3" # url pour la musique du taichi
# Apps du karotz
  karotz_tai_chi:
    alias: "Tai-Chi"  # Fait faire du tai-chi au karotz
    sequence:
      - action: rest_command.karotz_tai_chi
# Annonce de l'heure
  karotz_clock:
    url: "http://{{ states('input_text.karotz_ip_address') }}/cgi-bin/apps/clock"

# ajout de la liste des sons
# input_select:
#   karotz_sound_selector:
#     name: Son du karotz
#     options:
#       - bip1
#       - bling
#       - flush
#       - install_ok
#       - jet1
#       - laser_15
#       - ready
#       - rfid_error
#       - rfid_ok
#       - saut1
#       - start
#       - twang_01
#       - twang_04
#     initial: ready

    
# Automatisations
automation:
  # Gestion de l'état d'éveil
  - alias: "karotz on"
    trigger:
      - trigger: state
        entity_id: sensor.karotz_sleep
        to: "0"
    actions:
      - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.karotz_awake
      - data:
          text: Bonjour tous le monde !
        action: rest_command.karotz_say

  - alias: "karotz off"
    trigger:
      trigger: state
      entity_id: sensor.karotz_sleep
      to: '1'
    actions:
      - action: rest_command.karotz_say
        data:
          text: Bonne nuit les petits !
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.karotz_awake

  # Mise à jour des couleurs et effets lumineux
  - alias: "Update karotz color 1"
    trigger:
      trigger: state       
      entity_id: input_text.karotz_color_1
    actions:
      - action: rest_command.karotz_light

  - alias: "Update karotz color 2"
    trigger:
      - trigger: state
        entity_id: input_text.karotz_color_2
    actions:
      - action: rest_command.karotz_light

  - alias: "Update karotz light speed"
    trigger:
      - trigger: state
        entity_id: input_number.karotz_light_speed
    actions:
      - action: rest_command.karotz_light

  # Mise à jour de la position des oreilles
  - alias: "Update karotz ear left"
    trigger:
      - trigger: state
        entity_id: input_number.karotz_ear_left
    actions:
      - action: rest_command.karotz_ears

  - alias: "Update karotz ear right"
    trigger:
      - trigger: state
        entity_id: input_number.karotz_ear_right
    actions:
      - action: rest_command.karotz_ears

# ajout des tag rfid
  - alias: Démarrer enregistrement Karotz
    trigger:
      - trigger: state
        entity_id: input_boolean.karotz_mode_enregistrement_tag
        to: 'on'
    action:
      - action: rest_command.karotz_rfid_record_start

  - alias: Arrêter enregistrement Karotz
    trigger:
      - trigger: state
        entity_id: input_boolean.karotz_mode_enregistrement_tag
        to: 'off'
    action:
      - action: rest_command.karotz_rfid_record_stop

  - alias: Copier tag seulement si enregistrement actif
    trigger:
      - trigger: state
        entity_id: sensor.dernier_tag_karotz
    condition:
      - condition: state
        entity_id: input_boolean.karotz_mode_enregistrement_tag
        state: 'on'
    action:
      - action: input_text.set_value
        target:
          entity_id: input_text.karotz_rfid_id
        data:
          value: "{{ states('sensor.dernier_tag_karotz') }}"

# abaisser les oreilles en fonction du risque de pluie, clignoter plus ou moins vite en fonction de la vitesse du vent et avoir une couleur plus ou moins chaude en fonction de la température
  - alias: karotz - Réaction météo complète
    description: "Adapte les oreilles, la LED et le clignotement selon les conditions météo"
    trigger:
      - trigger: time_pattern
        minutes: "15"
    condition:
      - condition: time
        after: "07:00:00"
        before: "19:00:00"
    actions:
      - action: rest_command.karotz_ears_reset
      - variables:
          rain_chance: "{{ states('sensor.treillieres_rain_chance') | float(0) }}"
          temp: "{{ states('sensor.pac_atom_temp_ext') | float(0) }}"
          wind: "{{ states('sensor.weather_station_vitesse_moyenne_du_vent_km_h') | float(0) }}"

          # Position des oreilles
          ear_pos: >
            {% set rain_chance = states('sensor.treillieres_rain_chance') | float(0) %}
            {% if rain_chance < 5 %}
              15
            {% elif rain_chance > 60 %}
              4
            {% else %}
              {{ 15 - ((rain_chance - 5) // 5) }}
            {% endif %}

          # Couleur LED
          color_palette: [
            'ADD8E6', '87CEFA', '00CED1', '40E0D0', '90EE90',
            'ADFF2F', 'FFD700', 'FFA500', 'FF4500', 'FF0000'
          ]
          color_index: >
            {% set index = ((temp + 10) // 5) | int %}
            {% if index < 0 %}0{% elif index > 9 %}9{% else %}{{ index }}{% endif %}
          led_color: "{{ color_palette[color_index] }}"

          # Clignotement
          blink_speed: >
            {% set base = 2000 %}
            {% set min_speed = 100 %}
            {% set decrement = ((wind // 5) * 150) %}
            {% set result = base - decrement %}
            {% if result < min_speed %}{{ min_speed }}{% elif result > base %}{{ base }}{% else %}{{ result | int }}{% endif %}
      - action: input_number.set_value
        data:
          entity_id: input_number.karotz_ear_left
          value: "{{ ear_pos }}"
      - action: input_number.set_value
        data:
          entity_id: input_number.karotz_ear_right
          value: "{{ ear_pos }}"
      - action: input_text.set_value
        data:
          entity_id: input_text.karotz_color_1
          value: "{{ led_color }}"
      - action: input_text.set_value
        data:
          entity_id: input_text.karotz_color_2
          value: "000000"
      - action: input_number.set_value
        data:
          entity_id: input_number.karotz_light_speed
          value: "{{ blink_speed }}"
      - action: rest_command.karotz_light
      - action: rest_command.karotz_ears
      - action: rest_command.karotz_say
        data:
          text: >-
            Il fait {{ temp | round(0) }} degrés.
            Le vent souffle à {{ wind | round(0) }} kilomètres par heure.
            Le risque de pluie est de {{ rain_chance | round(0) }} pourcents.
    mode: single

  # Annonce de l'heure toutes les heures
  - alias: "Karotz - Annonce de l'heure"
    description: "Fait annoncer l'heure par le Karotz toutes les heures"
    trigger:
      - platform: time_pattern
        minutes: "0"
    condition:
      - condition: time
        after: "07:00:00"
        before: "20:00:00"
      - condition: state
        entity_id: input_boolean.karotz_awake
        state: "on"
    action:
      - action: rest_command.karotz_clock

